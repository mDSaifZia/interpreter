import argparse
import ast
import os
from custom_semantic_checker import SemanticChecker
from custom_lexer import Lexer
from custom_parser import Parser
from custom_bytecode_generator import BytecodeGenerator

#To run this file from proj dir: 
# python FrontEndParts/frontend_manager.py -i testing/inputSourceCodeFiles/sourceCode[source code number].rtsk

def readBytecodeFile(filepath):
    with open(filepath, "rb") as f:
        header = f.read(64)
        # print("\n===================== Header =====================")
        # print(header)

        # print("\n===================== Main exec and Func def bytecode =====================")
        remaining_code = f.read()
        # print(remaining_code.decode('utf-8'))


def lexical_analysis(source_code):
    lexer = Lexer(source_code)
    tokens = lexer.tokenize()   # produces a list of Token objects
    # print("Tokens:")
    # for token in tokens:
    #     print(token)
    return tokens

def syntax_analysis(tokens):
    parser_obj = Parser(tokens) 
    ast = parser_obj.parse()    # produces an Abstract Syntax Tree (AST) from the list of Token objects
    # print("\nAST:")
    # print(ast)
    return ast

def semantic_analysis(ast):
    checker = SemanticChecker()
    try:
        checker.check(ast)
        print("Semantic Analysis: PASS")
    except Exception as e:
        print(f"Semantic Analysis: FAIL ({e})")

def generate_bytecode(ast, output_file):
    generator = BytecodeGenerator()
    generator.write_bytecode(ast, output_file)
    # generator.write_textfile(ast, output_file_text)

# ================================================ Main ================================================
def main():
    parser_arg = argparse.ArgumentParser(description="Custom Language Compiler")
    parser_arg.add_argument("-i", "--input", required=True, help="Input source code file (.rtsk)")
    # parser_arg.add_argument("-o", "--output", required=True, help="Output bytecode file")
    args = parser_arg.parse_args()

    inputfileName = args.input.split('\\')[-1].split('.')[0]  # get the file name without extension
    # output_file = f"{inputfileName}.bytecode"
    # output_file_text = f"testing/outputText(forReference)/text{inputfileName[-1]}.txt"
    output_file = os.path.join(os.getcwd(), f"{inputfileName}.bytecode")

    # Read the source code from the input file.
    with open(args.input, 'r') as f:
        code = f.read()

    tokens = lexical_analysis(code) # Lexical analysis

    ast = syntax_analysis(tokens)   # Syntax analysis

    semantic_analysis(ast)  # Semantic analysis

    generate_bytecode(ast, output_file) # Bytecode generation

    # readBytecodeFile(output_file) # Read the generated bytecode file (For testing purposes)
    
if __name__ == '__main__':
    main()
